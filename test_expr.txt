# A resizable list of integers
class Vector(object):
    # Attributes
    items : int = None
    size : int = 0

    # Constructor
    def __init__(self:"Vector"):
        self.items = [7]

    # Returns current capacity
    def capacity(self : "Vector"):
        return len(self.items)

    # Increases capacity of vector by one element
    def increase_capacity(self:"Vector"):
        self.items = self.items + [1]
        return self.capacity()

    # Appends one item to end of vector
    def append(self:"Vector", item: int):
        if self.size == self.capacity():
            self.increase_capacity()

        self.items[self.size] = item
        self.size = self.size + 1

# A faster (but more memory-consuming) implementation of vector
class DoublingVector(Vector):
    doubling_limit:int = 16

    # Overriding to do fewer resizes
    def increase_capacity(self:"DoublingVector"):
        if (self.capacity() <= self.doubling_limit):
            self.items = self.items + self.items
        else:
            # If doubling limit has been reached, fall back to
            # standard capacity increases
            self.items = self.items + [5]
        return self.capacity()

vec : Vector = None
num : int = 0

def fun(x : int) -> str:
   x = 0


for num in [4, 8, 15, 16, 23, 42]:
    vec.append(num)
    print(vec.capacity())




a  = a[2][3].mem = fun(a, b, c)

for i in range(10):
    pass

if x == 0 :
    return not h and y or a
elif x == 1 :
    return x
else :
    return 9



vec = 0


